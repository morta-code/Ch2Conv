#!/usr/bin/python3

import parser, lexer, text_reader
import sys
import getopt
import yaml

__version__ = 0.5


def main():
    input = sys.stdin
    output = sys.stdout
    grammar = None
    
    if len(sys.argv) == 1 or sys.argv[1] in ("-h", "--help"):
        printhelp()
        sys.exit()
    elif sys.argv[1] == "-l":
        printbuiltins()
        sys.exit()
    elif sys.argv[1] in ("-v", "--version"):
        printver()
        sys.exit()
    else:
        try:
            grammar = yaml.load(open(sys.argv[1]))
        except IOError:
            print("Not valid file: {}".format(sys.argv[1]))
            printhelp()
            sys.exit(2)
        except:
            print("Given grammar file ({}) is not valid.").format(sys.argv[1])
            sys.exit(3)
        
    try:
        opts, args = getopt.getopt(sys.argv[2:],"hi:o:")
    except getopt.GetoptError:
      printhelp()
      sys.exit(2)
    for opt, arg in opts:
      if opt == '-h':
         printhelp()
         sys.exit()
      elif opt == "-i":
         input = open(arg)
      elif opt == "-o":
         output = arg

    
    ### Pipeline
    src = text_reader.TextReader(input) # TODO: puffer megadása
    for ldef in grammar['lexers']:
        name, rules = ldef.popitem()
#         print(name)
#         print(rules)
        lex = lexer.Lexer(name, rules, src)
        src = lex
    
    prs = parser.Parser(src, grammar['syntax'], output)
    
    ### Magic!
    prs.parse()
    print("Finished.")
    
    
def printhelp():
    print("Usage:\n\tch2conv (definition_file|builtin) [-i infile] [-o outfile]\n\tch2conv -h\n\tch2conv -l")
    
def printbuiltins():
    # TODO
    pass

def printver():
    # TODO
    print(__version__)

def valid(gr):
    # TODO
    # Van legalább egy lexer?
    # Van pntosan egy syntax
    # Lexerek: tömb, szabályok tömbben, első lexer értékei nem lehetnek skalárok
    pass

if __name__ == '__main__': main()
